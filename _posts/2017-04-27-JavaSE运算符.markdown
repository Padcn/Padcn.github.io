---
title:  JavaSE运算符 
date: 2017-04-27
tags: JavaSE
---
# JavaSE运算符

先上全家福，来自百度百科

![CSDN图标](https://imgsa.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=59a3e1017d3e6709aa0d4dad5aaef458/63d9f2d3572c11df57c9a205612762d0f703c2f8.jpg "java运算符优先表")

java中操作符分以下几类：
	
	1.算数运算符 2.关系运算符 3.逻辑运算符 4.位运算符 5.移位运算符
	
1.算数运算符
	  
      +,- ,× ,/ ,%
	
2.关系运算符

	 <,>,<=,>=,==,!=
        
3.逻辑运算符
	
    &&，&，||，|
 > 在逻辑运算符中，&&，||是短路运算符，当结果已经不会发生改变的情况下就不会进行完整的判断，而是直接得出结果。如 false&&(i++==1) 运算后i++并没有执行，因为无论后面这一部分结果为如何整个表达式的结果都为false，||操作符同理。&和|则会完整执行完表达式。
 
 
4.位运算符

	 &,|,!（非）,^（异或）,~ (按位取反)
> 位运算是把数值转换成二进制，按位进行位运算。

5.移位运算符

	<<,>>,>>>
    

 > 移位运算符后面是二目运算符，格式为 value>>bitToMove ， value是需要操作的数值，bitToMove表示需要左移或者右移的位数，>>和<<是带符号的移动，>>>则是无符号的右移，无论是正数还是负数都会在左边补0。（>>>在c/c++中没有）


补充：
	
- 老生常谈的自增顺序:
    	value=i++ 和value=++i 这个是一直被提起的一个东西，先赋值在自增还是先自增再赋值呢？
        我的理解是根据操作符号的位置 i++ i在++操作之前，所以是先使用i这个值再自增，而++i中++在前，所以先自增，自增之后的值拿来使用。

- java中没有像c++那样的运算符重载
- 运算时会发生自动类型转换，小类型转大类型会自动转换，范围比较大的类型转成小的类型需要强制转换（可能会损失精度）。
- java中没有像c/c++中的sizeof， 原因是c/c++在不同位数的机器上数据类型大小会不同，而在java中则没有这种问题。
     