---
title:  JavaSE控制流 
date: 2017-04-28
tags: JavaSE
---
# JavaSE 控制流

java中控制流总分为3种：分支语句，循环语句，跳转语句

1.分支语句

- if..else
    
   格式为：
   ```java
    if(条件){
   	   语句块1
    }else{
       语句块2
    }
    //或者
    if(条件1){
       语句块1
    }else if(条件2){
       语句块2
    }else{
       语句块3
    }
	```
     当条件成立时结果为true时执行语句块1,当结果为false时执行语句块2在java中不像c/c++或者其他语言一样可以用非0代表true，0代表false。java中if的条件结果必须要为一个boolean值，否则编译器会报错，while条件同。
	
- switch..case
	
    格式为：
   ```java
    switch(值){
    	case 常量1：语句块1;
 		case 常量2：语句块2;
    	default:语句块3;
    }
	```
	jdk1.7之前，switch中的值必须要是整型，或者可以转换为整型的值，比如：byte，short，int,char。 enum也是可以的。
	
	jdk1.7之后可以使用字符串。
    
    case后必须跟的是常量。
    
    switch的使用是用switch中传入的值与case后的常量依次对比，如果匹配则执行相应case后面的语句块，语句块中通常用break关键字进行跳出，否则会执行执行case以下的所有case条件后的语句。 如果没有匹配则执行default后的语句块，default不是必须要有的。

2.循环语句
- while

格式为：
```java
    while(条件){
    	语句块
    }
    //或者
    do{
    	语句块
    }while(条件)

```

    while中的条件与if中的条件规则一样，需要是boolean，或者结果为boolean。
上一种先进行条件的判断，如果条件成立则执行语句块，循环判断与执行，直到条件为false。
do..while则是先执行语句块再判断条件是否成立，如果成立则继续执行和判断，直到条件结果为false。
    
- for

格式为：
```java
   //普通for循环
    for(语句1;条件;语句2){
    	语句块
    }
    //或者
    //增强for循环
    for(容器中变量类型的变量:数组或容器){
    	语句
    }
    
    //死循环
    for(;;){
    }
```
   普通for循环一般语句1为记录的值，当i小于total的值时进行循环，语句1只在第一次执行时执行一次后面就先判断后执行语句块在执行语句2,一直到条件为false为止,如
   ```java
    for(int i=0;i<total;i+=step){
    }
   ```
step为步长。这里初始化i为0,当每次循环i都会加上step的值，一直到i小于total不成立。

> 循环总结：一般当明确了解循环要进行的次数的时候使用for循环，当只知道一个条件不明确要执行几次的情况下使用while循环比较多。

3.跳转语句

跳转语句一般在循环中或者函数中配合使用，用来灵活的控制程序的执行。
- break
	
    作用：在循环中使用，当执行到break的时候跳出循环，运行循环后面的语句。
- continue
	
    作用：在循环中使用，当执行到continue的时候结束当前单次循环，进行下一次的循环。
- return
	
    作用：在函数中使用，直接跳出这个函数，如果后面有值则返回值，如果没有默认返回空。
 
> 注：break和continue后可以加标签，表示跳到标签位置，类似c/c++中的goto语句。
> 关于在之后异常中catch中有return值而finally中也有return值，则return的是finally中的值。
