---
title:  maven 
date: 2017-05-14 
tags: maven
---
# maven
Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目的工具

下载网站

http://maven.apache.org

配置环境变量
1. 新建M2_HOME变量  指向maven的安装目录如 目录\apache-maven-3.3.3
2. 加入path最后 %M2_HOME%\bin;
3. 验证 mvn -v查看版本号

目录结构

    项目名
        src
            -main
                -java
                    -package
            -test
                -java
                    -package
            -resources
pom.xml在struts2-core-*.jar下META_INF\maven中有模板，可以改造，删除中间部分。修改后放入项目中如maven01目录下
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
     <groupId>com.imooc.maven01</groupId>
     <artifactId>maven01-model</artifactId>
     <version>0.0.1SNAPSHOT</version>
    <dependencies>
    	<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
        </dependency>
    </dependencies>
</project>
```

进入项目路径运行 mvn complie 进行编译，生成文件在target文件夹下

mvn package 生成maven01-model的jar 相当于打包。

> 初次使用compile的时候可能会报“Unknown lifecycle phase”的错误，这个时候需要先执行下面命令
```bash
mvn install
mvn compiler:compile
mvn org.apache.maven.plugins:maven-compiler-plugin:compile
mvn org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile
```

mvn常用构建命令
	mvn -v 查看maven版本
    	compile 编译
        test 测试
        package 打包
        clean 删除target
        install 安装jar包到本地仓库中（进入相关项目目录使用，之后再pom.xml中还需要配置dependency，先从本地查找，如果找不到会去网上maven的中央仓库中找）
    
mvn archetype:generate
使用archetype插件自动产生目录骨架。
mvn archetype:generate -DgroupId=com.imooc.maven04 -DatifactId=maven04-demo -Dversion=1.0.0SNAPSHOT -Dpackage=com.imooc.maven04.demo

> 使用Maven运行Java main的3种方式 http://www.tuicool.com/articles/UJJvim


# 坐标和仓库
https://repo.maven.apache.org/maven2 默认全球中央仓库地址，其中可以搜索很多。

修改maven镜像方法

在conf文件下settings.xml找到mirror标签更改
```xml
<mirror>
<id>maven.net.cn</id>
<mirrorOf>central</mirrorOf>
<name>central mirror in china</name>
<url>http://maven.net.cn/content/groups/public</url>
</mirror>
```
修改本地仓库路径
修改setting
```xml
<localRepository>路径</localRepository>
```

# 在eclipse中安装maven插件
将插件放进eclipse安装目录下的drop
eclipse4.0以上就不需要配置了

# maven生命周期
clean 清理项目
default 构建项目
site 生成项目站点


clean compile test package install
执行某个阶段 前面的也会顺序执行
clean项目 pre-clean
		clean 清理上一次构建生成的所有文件
        post-clean 执行清理后的文件
        
 default构建项目 （最核心）
 	compile test package install
    
    
  site生成项目站点
  	pre-site 生成项目站点前完成工作
    site 生成项目的站点文档
    post-site 在生成项目站点后要完成的工作
    site-deploy 发布生成的站点到服务器上
    
 pom.xml中加入
```xml
 <build>
 	<plugin>
    	<groupId>org.apache.maven.plugins</groupId>
    	<artifactId>maven-source-plugin</artifactId>
    	<version>2.4</version>
    	<executions>
        	<execution>
            	<phase>package</phase>
                <goals>
                	<goal>jar-no-fork</goal>
                </goals>
            </execution>
        </executions>
    </plugin>
 </build>
```



# pom.xml常用元素
	
   ```xml
  <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!--指定了当前pom的版本-->
    <modelVersion>4.0.0</modelVersion>
    
    <!--主项目的标识-->
     <groupId>反写的公司网址+项目名</groupId>
     <!--模块的标识，项目中的-->
     <artifactId>项目名+模块名</artifactId>
     <!--
     项目版本号 大版本号 分支版本号 小版本号
     snapshot快照版本 alpha内部测试 beta公测 
     Release稳定版	GA正式发布
     -->
     <version>0.0.1SNAPSHOT</version>
     <!--maven项目打包方式，默认是jar 还可以是war zip pom等-->
     <packaging></packaging>
    <!--项目描述名，一般是项目产生文档时使用-->
    <name></name>
    <!--项目地址-->
    <url></url>
    <!--项目描述-->
    <description></description>
    <!--开发者信息-->
    <developers></developers>
    <!--许可证信息-->
    <licenses></licenses>
    <!--组织信息-->
    <organization></organization>
   <!--依赖列表-->
   <dependencies>
    	<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <type></type>
            <!--依赖范围-->
            <scope></scope>
            <!--设置依赖是否可选，默认为false，如果是false默认继承 ，如果为true则必须显式引入-->
            <optional></optional>
            <!--排除依赖传递列表-->
            <exclusions>
            	<exclusion></exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <!--依赖管理，这里依赖并不会执行，主要是用来给子模块进行继承-->
    <dependencyManagement>
    	<dependencies>
        	<dependency></dependency>
        </dependencies>
    </dependencyManagement>
	<build>
    	<!--插件列表-->
    	<plugins>
        	<plugin>
            	<!--依旧要指定坐标-->
            	<groupId></groupId>
                <artifactId>junit</artifactId>
           		 <version>4.10</version>
            </plugin>
        </plugins>
    </build>
    <!--用于子模块对于父模块的继承-->
    <parent></parent>
    <!--聚合，如果有很多模块需要编译，可以在这里指定多个模块一起运行-->
    <modules>
    	<module></module>
    </modules>
</project>
   ```

# 依赖
## scope标签：
classpath 编译 测试 运行
可以有以下值

| 值 | 作用于范围 |
| ---- | ---- |
|compile|默认的范围，编译测试运行都有效 |
|provided|编译和测试时有效，测试时无效 |
|runtime|测试和运行时有效，比如jdbc的驱动在编译时不需要 |
|test|测试时有效，典型应用junit |
|system|和privided类似，但是与本地系统相关联，可移植性差 |
|import|导入的范围，它只使用在dependencyManagement中，标识从其他的pom中导入dependecy的配置 |

## 依赖传递
依赖会传递，如果不想传递可以使用exclusions标签进行排除


settings.xml中的profile中加入用来设置默认jdk（因为maven默认使用1.5）
```xml
<activation>
	<activeByDefault>true</activeByDefault>
   	<jdk>1.7</jdk>
</activation>
```


## 依赖冲突

依赖中有2个不同版本jar，造成冲突
1. 短路优先，路径短的优先
2. 先声明先优先（在路径相同情况下，xml中谁先声明谁优先）

## 聚合和继承

使用modules标签进行聚合，可以一起构建
```xml
	<modules>
    	<module></module>
        <module></module>
        <module></module>
    </modules>
```

# 使用maven构建web项目

1. 新建maven项目，选择 maven-archetype-webapp

2. 需要配置servlet的api www.mvnrepository.com搜索servlet 复制servlet坐标 增加到pom.xml中的dependency中设定scope为provided

3. 按照maven约定创建目录src/main/java和src/test/java 如果无法创建可以在Navigator视图下创建，之后到工程视图update

4. 确保buildpath中输出路径为target的class目录中

5. property - project Facets-Dynamic Web Module勾选

6. property-deployment assembly - 去除test相关部署

7. 中央仓库搜索jetty maven plugin 复制插件坐标粘贴进plugins中的plugin标签内 （如果要使用tomcat插件可以去tomcat官网-maven plugin复制例子中的坐标）

8. run as maven builder

9. 输入 jetty:run 运行

> 如果想在打包时就运行则使用executions标签
```xml

		<plugins>
        	<plugin>
            	<!--依旧要指定坐标-->
            	<groupId></groupId>
                <artifactId>junit</artifactId>
           		 <version>4.10</version>
                 <executions>
                 	<execution>
                    	<!--打包成功后使用jetty:run来运行jetty服务-->
                    	<phase>package</phase>
                        <goals>
                        	<goal>run</goal>
                        </goals>
                    </execution>
                 </executions>
            </plugin>
        </plugins>
```


---
查看本地仓库路径：mvn help:effective-settings













        
	